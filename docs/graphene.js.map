{"version":3,"sources":["src/config.ts","src/control.ts","src/instance-manager.ts","src/instance.ts","src/physics.ts","src/renderer.ts","src/types/point.ts","src/user-interface.ts","src/types/atom.ts","src/types/quad-tree.ts","src/types/vector.ts"],"names":[],"mappings":"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","file":"graphene.js","sourcesContent":["// Copyright 2016-2017 AdlerTech\r\n\r\nmodule Graphene {\r\n    export class Config {\r\n        // Performance\r\n        public AutoAdjustAtomCount: boolean = true;\r\n        public Density: number = 0.5;\r\n        public MaxAtoms: number = 200;\r\n        public MaxLinkLength: number = 150;\r\n        public MaxLinksPerAtom: number = 0;\r\n        // Renderer\r\n        public AlphaBackground: boolean = false;\r\n        public DrawLinks: boolean = true;\r\n        public DrawQuadTree: boolean = false;\r\n        public LinkWidth: number = 1.5;\r\n        public AtomMinSize: number = 4;\r\n        public AtomMaxSize: number = 8;\r\n        public MaxFPS: number = 60;\r\n        // Colors\r\n        public BackgroundColor: string = undefined;\r\n        public LinkColor: string = undefined;\r\n        public AtomColor: string | string[] = undefined;\r\n        public AtomBorderColor: string = undefined;\r\n        // Dimensions\r\n        public Height: number = 0;\r\n        public Width: number = 0;\r\n        public MaxHeight: number = 0;\r\n        public MaxWidth: number = 0;\r\n        public UserInterface: boolean = true;\r\n        // Physics\r\n        public TPS: number = 60;\r\n        public ElectricalForce: number = 0; // electrical force constant, acts between atoms. (1000 is a good value)\r\n        public Gravity: Vector = { X: 0, Y: 0 } as Vector; // Applies force to all atoms\r\n        public AtomCollisions: boolean = true;\r\n        public WallCollisions: boolean = true;\r\n        public WallFriction: number = 0.9; // How much energy is preserved when bouncing atoms at walls\r\n        public AtomFriction: number = 0.9; // How much energy is preserved when colliding atoms\r\n\r\n        public static parse(config: Config): Config {\r\n            const c: Config = new Config();\r\n            console.log('Parsing config: ' + JSON.stringify(config));\r\n            // tslint:disable-next-line:forin\r\n            for (const key in c) {\r\n                if (c.hasOwnProperty(key) && config[key] != null) {\r\n                    const value: any = config[key];\r\n                    if (key === 'AtomColor') {\r\n                        if (value.constructor === Array.constructor) {\r\n                            c[key] = value;\r\n                        } else {\r\n                            c[key] = [value];\r\n                        }\r\n                    } else {\r\n                        console.log('Setting value ' + key + ' : ' + value);\r\n                        c[key] = value;\r\n                    }\r\n                }\r\n            }\r\n            return c;\r\n        }\r\n    }\r\n}","// Copyright 2017 AdlerTech\r\nmodule Graphene {\r\n    const RECORD_LENGTH: number = 1000;\r\n    const TIME_SECOND: number = 1000;\r\n    const DROP_THRESHOLD: number = 5 * TIME_SECOND;\r\n    const AVERAGE_LENGTH: number = 100; // The samples over which to accumulate the average\r\n    export class Control {\r\n        private _frameTimes: number[] = new Array<number>(RECORD_LENGTH);\r\n        private _frameTimesIdx: number = 0;\r\n        private _frameCount: number = 0;\r\n        private _physicsTimes: number[] = new Array<number>(RECORD_LENGTH);\r\n        private _physicsTimesIdx: number = 0;\r\n        private _physicsCount: number = 0;\r\n\r\n        private _frameStart: number = 0;\r\n        private _physicsStart: number = 0;\r\n\r\n        public onFrameStart(): void {\r\n            this._frameStart = window.performance.now();\r\n        }\r\n\r\n        public onFrameStop(): void {\r\n            const now: number = window.performance.now();\r\n            const duration: number = now - this._frameStart;\r\n            if (this._frameStart > 0 && duration < DROP_THRESHOLD) {\r\n                this._frameCount++;\r\n                this._frameTimesIdx = ++this._frameTimesIdx < RECORD_LENGTH ? this._frameTimesIdx : 0;\r\n                this._frameTimes[this._frameTimesIdx] = duration;\r\n            }\r\n        }\r\n\r\n        public onPhysicsStart(): void {\r\n            this._physicsStart = window.performance.now();\r\n        }\r\n\r\n        public onPhysicsStop(): void {\r\n            const now: number = window.performance.now();\r\n            const duration: number = now - this._physicsStart;\r\n            if (this._physicsStart > 0 && duration < DROP_THRESHOLD) {\r\n                this._physicsCount++;\r\n                this._physicsTimesIdx = ++this._physicsTimesIdx < RECORD_LENGTH ? this._physicsTimesIdx : 0;\r\n                this._physicsTimes[this._physicsTimesIdx] = duration;\r\n            }\r\n        }\r\n\r\n        public onRenderStart(): void {\r\n\r\n        }\r\n\r\n        public onRenderStop(): void {\r\n\r\n        }\r\n\r\n        public get AveragePhysicsTime(): number {\r\n            let time: number = 0;\r\n            let times: number = 0;\r\n            for (let i: number = 0; i < 5; ++i) {\r\n                let idx: number = this._physicsTimesIdx - i;\r\n                if (idx < 0) { idx = RECORD_LENGTH - idx; }\r\n                const t: number = this._physicsTimes[idx];\r\n                if (t != null && t > 0) {\r\n                    times++;\r\n                    time += t;\r\n                }\r\n            }\r\n            if (times > 0) {\r\n                return time / times;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        public get AverageFrameTime(): number {\r\n            let time: number = 0;\r\n            let times: number = 0;\r\n            for (let i: number = 0; i < 5; ++i) {\r\n                let idx: number = this._frameTimesIdx - i;\r\n                if (idx < 0) { idx = RECORD_LENGTH - idx; }\r\n                const t: number = this._frameTimes[idx];\r\n                if (t != null && t > 0) {\r\n                    times++;\r\n                    time += t;\r\n                }\r\n            }\r\n            if (times > 0) {\r\n                return time / times;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        public get LastFrameTime(): number {\r\n            return this._frameTimes[this._frameTimesIdx];\r\n        }\r\n\r\n        public get LastPhysicsTime(): number {\r\n            return this._physicsTimes[this._physicsTimesIdx];\r\n        }\r\n    }\r\n}","// Copyright 2016-2017 AdlerTech\r\n\r\nmodule Graphene {\r\n    export class InstanceManager {\r\n        private static _instances: Instance[] = new Array<Instance>();\r\n\r\n        public static createInstance(canvas: HTMLCanvasElement, config: Config, useroverlay: HTMLElement = null): Instance {\r\n            console.log('Creating instance...');\r\n            const i: Instance = new Instance(this.generateId(), canvas, config, useroverlay);\r\n            this._instances.push(i);\r\n            return i;\r\n        }\r\n\r\n        private static generateId(): string {\r\n            return '1'; // TODO\r\n        }\r\n    }\r\n}","// Copyright 2016-2017 AdlerTech\r\n\r\nmodule Graphene {\r\n    export class Instance {\r\n        private _id: string;\r\n        private _canvas: HTMLCanvasElement;\r\n        private _config: Config;\r\n        private _renderer: Renderer;\r\n        private _physics: Physics;\r\n        private _userInterface: UserInterface;\r\n\r\n        private _activeAtomCount: number = 0;\r\n        private _atoms: Atom[] = new Array<Atom>();\r\n\r\n        private _height: number = 0;\r\n        private _width: number = 0;\r\n\r\n        private _loopId: number = 0;\r\n        private _lastRunTimeStamp: number = 0;\r\n        private _cyclesExceeded: number = 0;\r\n        private _autoAtomLimit: number = 0;\r\n        private _framesBetweenControl: number = 0;\r\n\r\n        private _control: Control = new Control();\r\n\r\n        public Links: boolean[][] = new Array<boolean[]>();\r\n\r\n        constructor(id: string, canvas: HTMLCanvasElement, config: Config, useroverlay: HTMLElement = null) {\r\n            this._id = id;\r\n            this._canvas = canvas;\r\n            this._config = Config.parse(config);\r\n            if (this._config.UserInterface) {\r\n                this._userInterface = new UserInterface(this, this._canvas);\r\n                this._userInterface.bindTo(useroverlay != null ? useroverlay : canvas);\r\n            }\r\n\r\n            this.updateCanvasDimensions();\r\n\r\n            this._renderer = new Renderer(this._canvas, this);\r\n            this._physics = new Physics(this, this._control);\r\n\r\n            window.addEventListener('resize', this.onWindowResize);\r\n        }\r\n\r\n        public start(): void {\r\n            if (this._loopId === 0) {\r\n                this._loopId = window.requestAnimationFrame(this.mainLoop);\r\n            }\r\n        }\r\n\r\n        public stop(): void {\r\n            if (this._loopId !== 0) {\r\n                window.cancelAnimationFrame(this._loopId);\r\n            }\r\n        }\r\n\r\n        private mainLoop = (timestamp: number): void => {\r\n            this._control.onFrameStart();\r\n            this.controlAtomPopulation();\r\n            this._physics.update(timestamp);\r\n            if (this._lastRunTimeStamp === 0 ||\r\n                this.Config.MaxFPS === 0 ||\r\n                this._lastRunTimeStamp < timestamp - (1000 / this.Config.MaxFPS)) {\r\n                this._renderer.doRenderCycle();\r\n                this._lastRunTimeStamp = timestamp;\r\n            }\r\n\r\n            if (this._userInterface != null) {\r\n                this._userInterface.onUpdateCycle(this._physics);\r\n            }\r\n\r\n            this._loopId = window.requestAnimationFrame(this.mainLoop);\r\n            this._control.onFrameStop();\r\n        }\r\n\r\n        private controlAtomPopulation(): void {\r\n            const densityAtomCount: number = Math.round(\r\n                this.Config.Density !== 0 ?\r\n                    (this._width * this._height) / 1000 * this.Config.Density : 0\r\n            );\r\n            const maxAtoms: number = this.Config.MaxAtoms;\r\n            const maxFrameTime: number = 1000 / this.Config.MaxFPS;\r\n            const averageFrameTime: number = this._control.AverageFrameTime;\r\n            const maxPhysicsTime: number = 1000 / this.Config.TPS * 0.5;\r\n            const averagePhysicsTime: number = this._control.AveragePhysicsTime;\r\n\r\n            let targetAtomCount: number = 0;\r\n            if (densityAtomCount > 0 && maxAtoms > 0) {\r\n                targetAtomCount = densityAtomCount > maxAtoms ? maxAtoms : densityAtomCount;\r\n            } else if (densityAtomCount > 0 && maxAtoms === 0) {\r\n                targetAtomCount = densityAtomCount;\r\n            } else if (densityAtomCount === 0 && maxAtoms > 0) {\r\n                targetAtomCount = maxAtoms;\r\n            }\r\n\r\n            if (this.Config.AutoAdjustAtomCount) {\r\n                const atoms: number = this._activeAtomCount; // > 0 ? this._activeAtomCount : maxAtoms;\r\n                if (this._control.LastFrameTime > 500) {\r\n                    targetAtomCount = (atoms * 0.2) | 0;\r\n                    this._autoAtomLimit = targetAtomCount;\r\n                    console.log('PopulationControl:', 'Panic, reducing atom count from ' + atoms + ' to ' + targetAtomCount);\r\n                } else if (this._framesBetweenControl <= 0 && averageFrameTime > maxFrameTime * 1.5) { // Reduction\r\n                    let f: number = maxFrameTime / averageFrameTime;\r\n                    if (f < 0.8) { f = 0.8; }\r\n                    targetAtomCount = Math.round(atoms * f);\r\n                    if (targetAtomCount <= 1) { targetAtomCount = 2; }\r\n                    this._autoAtomLimit = targetAtomCount;\r\n                    this._framesBetweenControl = 100;\r\n                    console.log('PopulationControl:', 'Reducing atom count from ' + atoms + ' to ' + targetAtomCount + ' Factor is:' + f);\r\n                    console.log('AverageFrameTime: ', averageFrameTime, 'MaxFrameTime', maxFrameTime);\r\n                } else if (this._framesBetweenControl <= 0\r\n                    && averageFrameTime > 0 && averageFrameTime < maxFrameTime * 0.5\r\n                    && (maxAtoms === 0 || atoms < maxAtoms)\r\n                    && (densityAtomCount === 0 || atoms < densityAtomCount)) { // Increase\r\n                    let f: number = maxFrameTime / averageFrameTime;\r\n                    if (f > 1.2) { f = 1.2; }\r\n                    targetAtomCount = Math.round(atoms * f);\r\n                    if (targetAtomCount - atoms > 250) { targetAtomCount = atoms + 250; }\r\n                    if (targetAtomCount === atoms) { targetAtomCount++; }\r\n                    if (densityAtomCount > 0 && targetAtomCount > densityAtomCount) { targetAtomCount = densityAtomCount; }\r\n                    if (maxAtoms > 0 && targetAtomCount > maxAtoms) { targetAtomCount = maxAtoms; }\r\n                    this._autoAtomLimit = targetAtomCount;\r\n                    this._framesBetweenControl = 100;\r\n                    console.log('PopulationControl:', 'Increasing atom count from ' + atoms + ' to ' + targetAtomCount + ' Factor is:' + f);\r\n                    console.log('AverageFrameTime: ', averageFrameTime, 'MaxFrameTime', maxFrameTime);\r\n                } else if (this._autoAtomLimit > 0) {\r\n                    targetAtomCount = this._autoAtomLimit;\r\n                }\r\n                this._framesBetweenControl--;\r\n            }\r\n\r\n            if (this._atoms.length < targetAtomCount) {\r\n                this._atoms.length = targetAtomCount;\r\n            } else if (this._atoms.length > targetAtomCount) {\r\n                this._atoms.splice(targetAtomCount, this._atoms.length - targetAtomCount);\r\n            }\r\n            for (let i: number = 0; i < this._atoms.length; ++i) {\r\n                if (this._atoms[i] == null) {\r\n                    // tslint:disable-next-line:max-line-length\r\n                    this._atoms[i] = new Atom(i, this.Config.AtomMinSize, this.Config.AtomMaxSize, this.getRandomPosition(), this.getRandomVector());\r\n                }\r\n            }\r\n            this._activeAtomCount = this._atoms.length;\r\n        }\r\n\r\n        private getRandomPosition(): Point {\r\n            return new Point(Math.random() * this.Width, Math.random() * this.Height);\r\n        }\r\n\r\n        private getRandomVector(): Vector {\r\n            const v: Vector = new Vector(1, 1).scaleTo(Math.random() * 200);\r\n            return v.rotate(Math.random() * 2 * Math.PI);\r\n        }\r\n\r\n        private updateCanvasDimensions(): void {\r\n            const c: Config = this._config;\r\n            const p: HTMLElement = this._canvas.parentElement;\r\n            if (c.Width === 0) {\r\n                if (c.MaxWidth > 0) {\r\n                    this._width = p.clientWidth > c.MaxWidth ? c.MaxWidth : p.clientWidth;\r\n                } else {\r\n                    this._width = p.clientWidth;\r\n                }\r\n            } else {\r\n                this._width = c.Width;\r\n            }\r\n            if (c.Height === 0) {\r\n                if (c.MaxHeight > 0) {\r\n                    this._height = p.clientHeight > c.MaxHeight ? c.MaxHeight : p.clientHeight;\r\n                } else {\r\n                    this._height = p.clientHeight;\r\n                }\r\n            } else {\r\n                this._height = c.Height;\r\n            }\r\n            this._canvas.setAttribute('width', this._width.toString(10));\r\n            this._canvas.setAttribute('height', this._height.toString(10));\r\n        }\r\n\r\n        private onWindowResize = (ev: UIEvent): void => {\r\n            this.updateCanvasDimensions();\r\n        }\r\n\r\n        public get Config(): Config {\r\n            return this._config;\r\n        }\r\n\r\n        public get Atoms(): Array<Atom> {\r\n            return this._atoms;\r\n        }\r\n\r\n        public get Physics(): Physics {\r\n            return this._physics;\r\n        }\r\n\r\n        public get Height(): number {\r\n            return this._height;\r\n        }\r\n        public get Width(): number {\r\n            return this._width;\r\n        }\r\n    }\r\n\r\n    export class Dimensions {\r\n        public Width: number;\r\n        public Height: number;\r\n    }\r\n}","// Copyright 2016-2017 AdlerTech\r\n\r\nmodule Graphene {\r\n    export class Physics {\r\n        private _lastRunTimestamp: number = 0;\r\n        private _instance: Instance;\r\n        private _config: Config;\r\n        private _quadTree: QuadTree = null;\r\n        private _control: Control;\r\n\r\n        constructor(instance: Instance, control: Control) {\r\n            this._instance = instance;\r\n            this._config = instance.Config;\r\n            this._control = control;\r\n        }\r\n\r\n        public update(timestamp: number): void {\r\n            const step: number = 1000 / this._config.TPS;\r\n            let delta: number = this._lastRunTimestamp === 0 ? step : timestamp - this._lastRunTimestamp;\r\n            if (delta > step * 100) {\r\n                console.log('Physics could not keep up. Skipping ' + Math.floor(delta / step) + ' Physics ticks.');\r\n                delta = step * 100;\r\n            }\r\n            for (; delta >= step; delta -= step) {\r\n                this._control.onPhysicsStart();\r\n                this._quadTree = null;\r\n                this.applyForce();\r\n                this.applyAtomWallCollisions();\r\n                this.checkAtomAtomCollisions();\r\n                this.moveAtoms();\r\n                this.applyLinks();\r\n                this._control.onPhysicsStop();\r\n            }\r\n            this._lastRunTimestamp = timestamp - delta; // If we skip parts of a step run it next time\r\n        }\r\n\r\n        private applyAtomWallCollisions(): void {\r\n            if (!this._config.WallCollisions) { return; }\r\n            const friction: number = this._config.WallFriction;\r\n            const width: number = this._instance.Width;\r\n            const height: number = this._instance.Height;\r\n\r\n            const outSideBoxX: Function = function (atom: Atom): boolean {\r\n                return (atom.Position.X - atom.Size < 0 && atom.Vector.X < 0)\r\n                    || (atom.Position.X + atom.Size >= width && atom.Vector.X > 0);\r\n            };\r\n            const outSideBoxY: Function = function (atom: Atom): boolean {\r\n                return (atom.Position.Y - atom.Size < 0 && atom.Vector.Y < 0)\r\n                    || (atom.Position.Y + atom.Size >= height && atom.Vector.Y > 0);\r\n            };\r\n\r\n            for (const atom of this._instance.Atoms) {\r\n                if (outSideBoxX(atom)) {\r\n                    atom.Vector = new Vector(atom.Vector.X * -1, atom.Vector.Y);\r\n                }\r\n                if (outSideBoxY(atom)) {\r\n                    atom.Vector = new Vector(atom.Vector.X, atom.Vector.Y * -1);\r\n                }\r\n                while (outSideBoxX(atom) || outSideBoxY(atom)) {\r\n                    const v: Vector = atom.Vector.scaleBy(this.getSpeedFactor() * 0.1);\r\n                    atom.Position.X += v.X;\r\n                    atom.Position.Y += v.Y;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        private applyAtomAtomCollision(atom1: Atom, atom2: Atom): void {\r\n            const dist: number = atom1.Size + atom2.Size;\r\n            let cnt: number = 0;\r\n            while (dist > atom1.distanceTo(atom2)) { // Move back to point of actual collision\r\n                atom1.Position.X += -atom1.Vector.X * this.getSpeedFactor() * 0.1;\r\n                atom1.Position.Y += -atom1.Vector.Y * this.getSpeedFactor() * 0.1;\r\n                atom2.Position.X += -atom2.Vector.X * this.getSpeedFactor() * 0.1;\r\n                atom2.Position.Y += -atom2.Vector.Y * this.getSpeedFactor() * 0.1;\r\n                ++cnt;\r\n            }\r\n            const calcVsAndVe: Function = function (nd1: Atom, nd2: Atom): any { // vS in Richtung der Stoßnormalen, vE Orthogonal\r\n                let n: Vector = Vector.fromAtoms(nd1, nd2);\r\n                n = n.scaleTo(nd1.Size);\r\n                const alph: number = nd1.Vector.angle(n);\r\n                let vS: Vector = new Vector(n.X, n.Y);\r\n                vS = vS.scaleTo(nd1.Vector.length() * Math.cos(alph));\r\n                const x: number = nd1.Vector.X - vS.X;\r\n                const y: number = nd1.Vector.Y - vS.X / n.X * n.Y;\r\n                const vE: Vector = new Vector(x, y);\r\n                return { vS: vS, vE: vE };\r\n            };\r\n            const obj1: any = calcVsAndVe(atom1, atom2);\r\n            const vS1: Vector = obj1.vS; const vE1: Vector = obj1.vE;\r\n            const obj2: any = calcVsAndVe(atom2, atom1);\r\n            const vS2: Vector = obj2.vS; const vE2: Vector = obj2.vE;\r\n\r\n            // Resultierender Vektor parallel zu Stoßnormalen\r\n            const friction: number = this._config.AtomFriction;\r\n            const calcU: Function = function (v1: Vector, v2: Vector, m1: number, m2: number): Vector {\r\n                const X: number = (m1 * v1.X + m2 * (2 * v2.X - v1.X)) / (m1 + m2);\r\n                const Y: number = (m1 * v1.Y + m2 * (2 * v2.Y - v1.Y)) / (m1 + m2);\r\n                return new Vector(X, Y).scaleBy(friction);\r\n            };\r\n            const uS1: Vector = calcU(vS1, vS2, atom1.Mass, atom2.Mass);\r\n            const uS2: Vector = calcU(vS2, vS1, atom2.Mass, atom1.Mass);\r\n            atom1.Vector = uS1.add(vE1);\r\n            atom2.Vector = uS2.add(vE2);\r\n        }\r\n\r\n        private applyForce(): void {\r\n            const g: Vector = new Vector(this._instance.Config.Gravity.X, this._instance.Config.Gravity.Y);\r\n            if (g.length() > 0) {\r\n                for (const atom of this._instance.Atoms) {\r\n                    atom.Vector = atom.Vector.add(g.scaleBy(this.getSpeedFactor()));\r\n                }\r\n            }\r\n            const electricalForce: number = this._config.ElectricalForce;\r\n            if (electricalForce > 0 || electricalForce < 0) {\r\n                for (const a of this._instance.Atoms) {\r\n                    for (let i: number = a.Id + 1; i < this._instance.Atoms.length; ++i) {\r\n                        const a2: Atom = this._instance.Atoms[i];\r\n                        const v: Vector = Vector.fromAtoms(a, a2).invert();\r\n                        const d: number = v.length();\r\n                        const f: number = electricalForce * a.Charge * a2.Charge / Math.pow(d, 2);\r\n                        const v1: Vector = v.scaleTo(f);\r\n                        const v2: Vector = v1.invert();\r\n                        a.Vector = a.Vector.add(v1);\r\n                        a2.Vector = a2.Vector.add(v2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private applyLinks(): void {\r\n            const len: number = this._instance.Atoms.length;\r\n            const maxLinkLength: number = this._config.MaxLinkLength;\r\n            const maxLinks: number = this._config.MaxLinksPerAtom > 0 ? this._config.MaxLinksPerAtom : Number.MAX_VALUE;\r\n            if (this._instance.Links.length !== len) {\r\n                this._instance.Links.length = len;\r\n            }\r\n            this._instance.Atoms.forEach((atom: Atom) => atom.Links = 0);\r\n            for (const a1 of this._instance.Atoms) {\r\n                for (let i: number = a1.Id + 1; i < len; ++i) {\r\n                    const a2: Atom = this._instance.Atoms[i];\r\n                    if (this._instance.Links[a1.Id] == null || this._instance.Links[a1.Id].length !== len) {\r\n                        this._instance.Links[a1.Id] = new Array<boolean>(len);\r\n                    }\r\n                    if (a1.distanceTo(a2) <= maxLinkLength && a1.Links < maxLinks && a2.Links < maxLinks) {\r\n                        a1.Links++; a2.Links++;\r\n                        this._instance.Links[a1.Id][a2.Id] = true;\r\n                    } else {\r\n                        this._instance.Links[a1.Id][a2.Id] = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private checkAtomAtomCollisions(): void {\r\n            if (!this._config.AtomCollisions) { return; }\r\n            const q: QuadTree = this.QuadTree;\r\n            for (const nd of this._instance.Atoms) {\r\n                const collisionNds: Atom[] = q.getItems(nd.Position.X, nd.Position.Y);\r\n                for (const colNd of collisionNds) {\r\n                    if (colNd.Id > nd.Id && nd.collidesWith(colNd)) {\r\n                        this.applyAtomAtomCollision(nd, colNd);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private getSpeedFactor(): number {\r\n            return 1 / this._config.TPS;\r\n        }\r\n\r\n        private moveAtoms(): void {\r\n            const sf: number = this.getSpeedFactor();\r\n            for (const atom of this._instance.Atoms) {\r\n                if (!atom.PhysicsLocked) {\r\n                    atom.Position.X += atom.Vector.X * sf;\r\n                    atom.Position.Y += atom.Vector.Y * sf;\r\n                }\r\n            }\r\n        }\r\n\r\n        public get QuadTree(): QuadTree {\r\n            if (this._quadTree == null) {\r\n                this._quadTree = new QuadTree(0, new Rectangle(0, 0, this._instance.Width, this._instance.Height));\r\n                this._quadTree.addItems(this._instance.Atoms);\r\n            }\r\n            return this._quadTree;\r\n        }\r\n    }\r\n}","// Copyright 2016-2017 AdlerTech\r\n\r\nmodule Graphene {\r\n    export class Renderer {\r\n        private _canvas: HTMLCanvasElement;\r\n        private _ctx: CanvasRenderingContext2D;\r\n        private _instance: Instance;\r\n\r\n        constructor(canvas: HTMLCanvasElement, instance: Instance) {\r\n            this._canvas = canvas;\r\n            this._ctx = canvas.getContext('2d', { alpha: instance.Config.AlphaBackground });\r\n            this._instance = instance;\r\n        }\r\n\r\n        public doRenderCycle(): void {\r\n            this.drawBackground();\r\n            if (this._instance.Config.DrawQuadTree) { this.drawQuadTree(); }\r\n            this.applyOcclusionCulling();\r\n            if (this._instance.Config.MaxLinkLength > 0) { this.drawLinks(); }\r\n            this.drawAtoms();\r\n        }\r\n\r\n        private applyOcclusionCulling(): void {\r\n            for (const atom of this._instance.Atoms) {\r\n                if ((atom.Size + atom.Position.X < 0 || atom.Position.X - atom.Size > this._instance.Width)\r\n                    && (atom.Size + atom.Position.Y < 0 || atom.Position.Y - atom.Size > this._instance.Height)) {\r\n                    atom.Visible = false;\r\n                } else {\r\n                    atom.Visible = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        private drawAtoms(): void {\r\n            const atomBorderColor: string = this._instance.Config.AtomBorderColor;\r\n            const atomColor: string[] = this._instance.Config.AtomColor as string[];\r\n\r\n            // Because fill seems to be magnitudes faster than stroke fill border and inner\r\n            // First draw `Border` below atom then draw atom inner color\r\n            for (const atom of this._instance.Atoms) {\r\n                if (!atom.Visible) { continue; }\r\n                this._ctx.fillStyle = atomBorderColor;\r\n                this._ctx.beginPath();\r\n                this._ctx.arc(atom.Position.X, atom.Position.Y, atom.Size, 0, Math.PI * 2);\r\n                this._ctx.fill();\r\n                this._ctx.fillStyle = atomColor[0];\r\n                this._ctx.beginPath();\r\n                this._ctx.arc(atom.Position.X, atom.Position.Y, atom.Size - 1.5, 0, Math.PI * 2);\r\n                this._ctx.fill();\r\n            }\r\n\r\n        }\r\n\r\n        private drawBackground(): void {\r\n            const i: Instance = this._instance;\r\n            this._ctx.clearRect(0, 0, i.Width, i.Height);\r\n            this._ctx.fillStyle = i.Config.BackgroundColor;\r\n            this._ctx.fillRect(0, 0, i.Width, i.Height);\r\n        }\r\n\r\n        private drawLinks(): void {\r\n            const len: number = this._instance.Atoms.length;\r\n            const links: boolean[][] = this._instance.Links;\r\n            for (const a1 of this._instance.Atoms) {\r\n                if (a1.Links > 0) {\r\n                    for (let i: number = a1.Id + 1; i < len; ++i) {\r\n                        const a2: Atom = this._instance.Atoms[i];\r\n                        if (links[a1.Id][a2.Id] && (a1.Visible || a2.Visible)) {\r\n                            this.drawLink(a1, a2);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private drawLink(atom1: Atom, atom2: Atom): void {\r\n            const dist: number = atom1.distanceTo(atom2);\r\n            const v: Vector = Vector.fromAtoms(atom1, atom2);\r\n            const p1: Point = atom1.Position.clone();\r\n            const p2: Point = atom2.Position.clone();\r\n            const v1: Vector = v.scaleTo(atom1.Size); p1.X += v1.X; p1.Y += v1.Y;\r\n            const v2: Vector = v.invert().scaleTo(atom2.Size); p2.X += v2.X; p2.Y += v2.Y;\r\n            let fac: number = (1 - (dist * dist) / Math.pow(this._instance.Config.MaxLinkLength, 2));\r\n            if (fac < 0) { fac = 0; }\r\n            this._ctx.lineWidth = this._instance.Config.LinkWidth * fac;\r\n            this._ctx.strokeStyle = this._instance.Config.LinkColor;\r\n            this._ctx.beginPath();\r\n            this._ctx.moveTo(p1.X, p1.Y);\r\n            this._ctx.lineTo(p2.X, p2.Y);\r\n            this._ctx.stroke();\r\n        }\r\n\r\n        private drawQuadTree(tree: QuadTree = this._instance.Physics.QuadTree): void {\r\n            this._ctx.font = '14px Arial';\r\n            this._ctx.textAlign = 'center';\r\n            this._ctx.fillStyle = '#ff00f2';\r\n            if (tree !== null) {\r\n                if (tree.IsSplit) {\r\n                    const b: Rectangle = tree.Bounds;\r\n                    // const c: Color = Color.fromHSV(120 + 40 * tree.Level, 1, 1);\r\n                    this._ctx.strokeStyle = '#ff00f2'; // c.toRGBString();\r\n                    this._ctx.lineWidth = 1;\r\n                    { // Draw our split axis\r\n                        this._ctx.beginPath();\r\n                        this._ctx.moveTo(b.XMid, b.Y1);\r\n                        this._ctx.lineTo(b.XMid, b.Y2);\r\n                        this._ctx.stroke();\r\n                        this._ctx.beginPath();\r\n                        this._ctx.moveTo(b.X1, b.YMid);\r\n                        this._ctx.lineTo(b.X2, b.YMid);\r\n                        this._ctx.stroke();\r\n                    }\r\n                    this._ctx.fillText('Spares:' + tree.Spares, b.XMid, b.YMid);\r\n                    for (const sector of tree.Sectors) {\r\n                        this.drawQuadTree(sector);\r\n                    }\r\n                } else {\r\n                    this._ctx.fillText('Objects:' + tree.Objects, tree.Bounds.XMid, tree.Bounds.YMid);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","// Copyright 2017 AdlerTech\r\nmodule Graphene {\r\n    export class Point {\r\n        private _x: number;\r\n        private _y: number;\r\n\r\n        constructor(x: number = 0, y: number = 0) {\r\n            this._x = x;\r\n            this._y = y;\r\n        }\r\n\r\n        public clone(): Point {\r\n            return new Point(this._x, this._y);\r\n        }\r\n\r\n        public get X(): number {\r\n            return this._x;\r\n        }\r\n        public set X(value: number) {\r\n            this._x = value;\r\n        }\r\n        public get Y(): number {\r\n            return this._y;\r\n        }\r\n        public set Y(value: number) {\r\n            this._y = value;\r\n        }\r\n    }\r\n}","// Copyright 2017 AdlerTech\r\n\r\n/// <reference path=\"types/point.ts\" />\r\n\r\nmodule Graphene {\r\n    export class UserInterface {\r\n        private _instance: Graphene.Instance;\r\n        private _pendingMouseAction: MouseAction = MouseAction.NONE;\r\n        private _mouseDown: boolean = false;\r\n        private _mousePosition: MousePosition = new MousePosition();\r\n        private _lastMousePosition: MousePosition = new MousePosition();\r\n        private _mouseMove: Vector = new Vector();\r\n        private _canvas: HTMLCanvasElement;\r\n        private _boundElement: HTMLElement;\r\n        private _focusedAtom: Atom = null;\r\n\r\n        constructor(instance: Graphene.Instance, canvas: HTMLCanvasElement) {\r\n            console.log('Constructing User Interface');\r\n            this._instance = instance;\r\n            this._canvas = canvas;\r\n        }\r\n\r\n        public bindTo(element: HTMLElement): void {\r\n            if (this._boundElement != null) {\r\n                this._boundElement.removeEventListener('mousedown', this.onMouseDown);\r\n                this._boundElement.removeEventListener('mousemove', this.onMouseMove);\r\n                this._boundElement.removeEventListener('mouseup', this.onMouseUp);\r\n                this._boundElement = null;\r\n            }\r\n            if (element != null) {\r\n                this._boundElement = element;\r\n                this._boundElement.addEventListener('mousedown', this.onMouseDown);\r\n                this._boundElement.addEventListener('mousemove', this.onMouseMove);\r\n                this._boundElement.addEventListener('mouseup', this.onMouseUp);\r\n            }\r\n        }\r\n\r\n        public onUpdateCycle(physics: Physics): void {\r\n            const targetedAtom: Atom = this.findTargetedAtom(physics.QuadTree, this.MousePosition);\r\n            if (this._pendingMouseAction === MouseAction.CLICK) {\r\n                // Find atom and do physics lock\r\n                if (targetedAtom != null) {\r\n                    this._focusedAtom = targetedAtom;\r\n                    this._focusedAtom.PhysicsLocked = true;\r\n                    const vector: Vector = Vector.fromPoints(this._lastMousePosition, this._mousePosition);\r\n                    this._focusedAtom.Vector = vector.scaleBy(1000 / (this.MousePosition.Time - this._lastMousePosition.Time));\r\n                    this._boundElement.style.cursor = 'move';\r\n                }\r\n            } else if (this._pendingMouseAction === MouseAction.RELEASE) {\r\n                // If has atom, set atom vector and relase physics lock\r\n                if (this._focusedAtom != null) {\r\n                    this._focusedAtom.PhysicsLocked = false;\r\n                    // Set Vector\r\n                    const vector: Vector = Vector.fromPoints(this._lastMousePosition, this._mousePosition);\r\n                    this._focusedAtom.Vector = vector.scaleBy(1000 / (this.MousePosition.Time - this._lastMousePosition.Time));\r\n                    this._focusedAtom = null;\r\n                }\r\n                this._boundElement.style.cursor = 'default';\r\n            } else if (this._mouseDown && this._focusedAtom != null) {\r\n                // Update Atom position\r\n                this._focusedAtom.Position.X = this.MousePosition.X;\r\n                this._focusedAtom.Position.Y = this.MousePosition.Y;\r\n                this._boundElement.style.cursor = 'move';\r\n            } else {\r\n                // Update cursor\r\n                this._boundElement.style.cursor = targetedAtom != null ? 'pointer' : 'default';\r\n            }\r\n\r\n            this._pendingMouseAction = MouseAction.NONE;\r\n        }\r\n\r\n        private findTargetedAtom(quadTree: QuadTree, point: Point): Atom {\r\n            for (const atom of quadTree.getItems(point.X, point.Y)) {\r\n                if (Math.abs(atom.Position.X - point.X) < atom.Size + 2 && Math.abs(atom.Position.Y - point.Y) < atom.Size + 2) {\r\n                    return atom;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        private onMouseDown = (event: MouseEvent): void => {\r\n            this._mouseDown = true;\r\n            this._mousePosition.X = this.translateX(event.clientX);\r\n            this._mousePosition.Y = this.translateY(event.clientY);\r\n            console.log('Click', event.clientX, event.clientY, this.MousePosition.X, this.MousePosition.Y);\r\n            this._mousePosition.updateRecordTime();\r\n            this._pendingMouseAction = MouseAction.CLICK;\r\n        }\r\n\r\n        private onMouseMove = (event: MouseEvent): void => {\r\n            this._lastMousePosition.X = this.MousePosition.X;\r\n            this._lastMousePosition.Y = this.MousePosition.Y;\r\n            this._lastMousePosition.updateRecordTime(this.MousePosition.Time);\r\n            this._mousePosition.X = this.translateX(event.clientX);\r\n            this._mousePosition.Y = this.translateY(event.clientY);\r\n            this._mousePosition.updateRecordTime();\r\n        }\r\n\r\n        private onMouseUp = (event: MouseEvent): void => {\r\n            this._mousePosition.X = this.translateX(event.clientX);\r\n            this._mousePosition.Y = this.translateY(event.clientY);\r\n            this._mousePosition.updateRecordTime();\r\n            this._mouseDown = false;\r\n            this._pendingMouseAction = MouseAction.RELEASE;\r\n        }\r\n\r\n        private translateX(x: number): number {\r\n            const canvasRect: ClientRect = this._canvas.getBoundingClientRect();\r\n            return x - canvasRect.left;\r\n        }\r\n        private translateY(y: number): number {\r\n            const canvasRect: ClientRect = this._canvas.getBoundingClientRect();\r\n            return y - canvasRect.top;\r\n        }\r\n\r\n        public get MousePosition(): MousePosition {\r\n            return this._mousePosition;\r\n        }\r\n\r\n        public get MouseDown(): boolean {\r\n            return this._mouseDown;\r\n        }\r\n    }\r\n\r\n    export enum MouseAction {\r\n        NONE,\r\n        CLICK,\r\n        RELEASE\r\n    }\r\n\r\n    export class MousePosition extends Point {\r\n        private _timestamp: number = 0;\r\n\r\n        constructor(x: number = 0, y: number = 0) {\r\n            super(x, y);\r\n            this.updateRecordTime();\r\n        }\r\n\r\n        public updateRecordTime(timestamp: number = 0): void {\r\n            if (timestamp === 0) {\r\n                this._timestamp = Date.now();\r\n            } else {\r\n                this._timestamp = timestamp;\r\n            }\r\n        }\r\n\r\n        public get Time(): number {\r\n            return this._timestamp;\r\n        }\r\n    }\r\n}","// Copyright 2016-2017 AdlerTech\r\n\r\nmodule Graphene {\r\n    export class Atom {\r\n        private _id: number;\r\n        private _charge: number;\r\n        private _color: string;\r\n        private _mass: number;\r\n        private _position: Point;\r\n        private _size: number;\r\n        private _vector: Vector;\r\n        private _physicsLock: boolean = false;\r\n        public Links: number = 0;\r\n        public Visible: boolean;\r\n\r\n        constructor(id: number, minSize: number, maxSize: number, pos: Point, vec: Vector) {\r\n            this._id = id;\r\n            this._position = pos;\r\n            this._charge = Math.random() > 0.5 ? 1 : -1;\r\n            this._size = Math.random() * Math.abs(maxSize - minSize) + Math.abs(minSize);\r\n            this._mass = (4 / 3) * Math.PI * Math.pow(this._size, 3);\r\n            this._vector = vec;\r\n        }\r\n\r\n        public collidesWith(atom: Atom): boolean {\r\n            return this.Id !== atom.Id\r\n                && this.distanceTo(atom) < this.Size + atom.Size;\r\n        }\r\n\r\n        public distanceTo(atom: Atom): number {\r\n            const x: number = atom.Position.X - this.Position.X;\r\n            const y: number = atom.Position.Y - this.Position.Y;\r\n            return Math.sqrt(x * x + y * y);\r\n        }\r\n\r\n        public get Charge(): number {\r\n            return this._charge;\r\n        }\r\n\r\n        public get Color(): string {\r\n            return this._color;\r\n        }\r\n\r\n        public get Id(): number {\r\n            return this._id;\r\n        }\r\n\r\n        public get Mass(): number {\r\n            return this._mass;\r\n        }\r\n\r\n        public get PhysicsLocked(): boolean {\r\n            return this._physicsLock;\r\n        }\r\n        public set PhysicsLocked(value: boolean) {\r\n            this._physicsLock = value;\r\n        }\r\n\r\n        public get Position(): Point {\r\n            return this._position;\r\n        }\r\n        public get Size(): number {\r\n            return this._size;\r\n        }\r\n        public get Vector(): Vector {\r\n            return this._vector;\r\n        }\r\n        public set Vector(value: Vector) {\r\n            this._vector = value;\r\n        }\r\n    }\r\n}","// Copyright 2016-2017 AdlerTech\r\n\r\nmodule Graphene {\r\n    const MAX_LEVEL: number = 5;\r\n    const MAX_OBJECTS: number = 10;\r\n\r\n    export class QuadTree {\r\n        private _bounds: Rectangle;\r\n        private _level: number;\r\n        private _objects: Atom[] = new Array<Atom>();\r\n        private _spares: Atom[] = new Array<Atom>();\r\n        private _sectors: QuadTree[];\r\n        private _isSplit: boolean = false;\r\n\r\n        constructor(level: number, rect: Rectangle) {\r\n            this._level = level;\r\n            this._bounds = rect;\r\n        }\r\n\r\n        public addItem(atom: Atom): void {\r\n            if (!this._isSplit) {\r\n                if (this._objects.length > MAX_OBJECTS && this._level < MAX_LEVEL) {\r\n                    this.split();\r\n                    this.addItem(atom);\r\n                } else {\r\n                    this._objects.push(atom);\r\n                }\r\n            } else {\r\n                if (this.isSpare(atom)) {\r\n                    this._spares.push(atom);\r\n                } else {\r\n                    const sector: QuadTree = this.getSector(atom.Position.X, atom.Position.Y);\r\n                    sector.addItem(atom);\r\n                }\r\n            }\r\n        }\r\n\r\n        public addItems(atoms: Atom[]): void {\r\n            for (const p of atoms) {\r\n                this.addItem(p);\r\n            }\r\n        }\r\n\r\n        public getItems(x: number, y: number): Atom[] {\r\n            if (this._isSplit) {\r\n                const sec: QuadTree = this.getSector(x, y);\r\n                const res: Atom[] = sec.getItems(x, y);\r\n                return res.concat(this._spares);\r\n            } else {\r\n                return this._objects;\r\n            }\r\n        }\r\n\r\n        private getSector(x: number, y: number): QuadTree {\r\n            /* Sectors are placed this way:\r\n            1 | 2\r\n            --|--\r\n            4 | 3\r\n            */\r\n            let secId: number = 0;\r\n            if (x > this._bounds.X1 && x < this._bounds.XMid) {\r\n                if (y > this._bounds.Y1 && y < this._bounds.YMid) {\r\n                    secId = 0;\r\n                } else {\r\n                    secId = 3;\r\n                }\r\n            } else {\r\n                if (y > this._bounds.Y1 && y < this._bounds.YMid) {\r\n                    secId = 1;\r\n                } else {\r\n                    secId = 2;\r\n                }\r\n            }\r\n            return this._sectors[secId];\r\n        }\r\n\r\n        private isSpare(atom: Atom): boolean {\r\n            const spareDist: number = atom.Size;\r\n            if (atom.Position.X >= this._bounds.XMid - spareDist && atom.Position.X <= this._bounds.XMid + spareDist) {\r\n                return true;\r\n            }\r\n            if (atom.Position.Y >= this._bounds.YMid - spareDist && atom.Position.Y <= this._bounds.YMid + spareDist) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        private split(): void {\r\n            if (!this._isSplit) {\r\n                this._sectors = new Array<QuadTree>(4);\r\n                const b: Rectangle = this._bounds;\r\n                this._sectors[0] = new QuadTree(this._level + 1, new Rectangle(b.X1, b.Y1, b.XMid, b.YMid));\r\n                this._sectors[1] = new QuadTree(this._level + 1, new Rectangle(b.XMid, b.Y1, b.X2, b.YMid));\r\n                this._sectors[2] = new QuadTree(this._level + 1, new Rectangle(b.XMid, b.YMid, b.X2, b.Y2));\r\n                this._sectors[3] = new QuadTree(this._level + 1, new Rectangle(b.X1, b.YMid, b.XMid, b.Y2));\r\n\r\n                for (const obj of this._objects) {\r\n                    if (this.isSpare(obj)) {\r\n                        this._spares.push(obj);\r\n                    } else {\r\n                        const sec: QuadTree = this.getSector(obj.Position.X, obj.Position.Y);\r\n                        sec.addItem(obj);\r\n                    }\r\n                }\r\n                this._objects = [];\r\n            }\r\n            this._isSplit = true;\r\n        }\r\n\r\n        public get Bounds(): Rectangle {\r\n            return this._bounds;\r\n        }\r\n        public get IsSplit(): boolean {\r\n            return this._isSplit;\r\n        }\r\n        public get Level(): number {\r\n            return this._level;\r\n        }\r\n        public get Objects(): number {\r\n            return this._objects.length;\r\n        }\r\n        public get Spares(): number {\r\n            return this._spares.length;\r\n        }\r\n        public get Sectors(): QuadTree[] {\r\n            return this._sectors;\r\n        }\r\n    }\r\n\r\n    export class Rectangle {\r\n        private _x1: number;\r\n        private _x2: number;\r\n        private _xMid: number;\r\n        private _y1: number;\r\n        private _y2: number;\r\n        private _yMid: number;\r\n\r\n        constructor(x1: number, y1: number, x2: number, y2: number) {\r\n            this._x1 = x1;\r\n            this._x2 = x2;\r\n            this._xMid = Math.floor(x2 - x1) / 2 + x1;\r\n            this._y1 = y1;\r\n            this._y2 = y2;\r\n            this._yMid = Math.floor(y2 - y1) / 2 + y1;\r\n        }\r\n\r\n        public get X1(): number {\r\n            return this._x1;\r\n        }\r\n        public get X2(): number {\r\n            return this._x2;\r\n        }\r\n        public get XMid(): number {\r\n            return this._xMid;\r\n        }\r\n        public get Y1(): number {\r\n            return this._y1;\r\n        }\r\n        public get Y2(): number {\r\n            return this._y2;\r\n        }\r\n        public get YMid(): number {\r\n            return this._yMid;\r\n        }\r\n    }\r\n}","// Copyright 2016-2017 AdlerTech\r\n\r\nmodule Graphene {\r\n    export class Vector {\r\n        private _x: number;\r\n        private _y: number;\r\n\r\n        public get X(): number {\r\n            return this._x;\r\n        }\r\n\r\n        public get Y(): number {\r\n            return this._y;\r\n        }\r\n\r\n        constructor(x: number = 0, y: number = 0) {\r\n            this._x = x;\r\n            this._y = y;\r\n        }\r\n\r\n        public static fromAtoms(atom1: Atom, atom2: Atom): Vector {\r\n            return new Vector(atom2.Position.X - atom1.Position.X, atom2.Position.Y - atom1.Position.Y);\r\n        }\r\n\r\n        public static fromPoints(point1: Point, point2: Point): Vector {\r\n            return new Vector(point2.X - point1.X, point2.Y - point1.Y);\r\n        }\r\n\r\n        public add(v: Vector): Vector {\r\n            return new Vector(this._x + v._x, this._y + v._y);\r\n        }\r\n\r\n        public angle(v: Vector): number {\r\n            const sc: number = this.scalar(v);\r\n            const l: number = this.length() * v.length();\r\n            if (l === 0) { return 0; }\r\n            let c: number = sc / l;\r\n            if (c < -1) {\r\n                c = -1;\r\n            } else if (c > 1) {\r\n                c = 1;\r\n            }\r\n            return Math.acos(c);\r\n        }\r\n\r\n        public invert(): Vector {\r\n            return this.scaleBy(-1);\r\n        }\r\n\r\n        public length(): number {\r\n            return Math.sqrt(this._x * this._x + this._y * this._y);\r\n        }\r\n\r\n        public rotate(angle: number): Vector {\r\n            const x: number = Math.cos(angle) * this._x - Math.sin(angle) * this._y;\r\n            const y: number = Math.sin(angle) * this._x + Math.cos(angle) * this._y;\r\n            return new Vector(x, y);\r\n        }\r\n\r\n        public scalar(v: Vector): number {\r\n            return this._x * v._x + this._y * v._y;\r\n        }\r\n\r\n        public scaleBy(scale: number): Vector {\r\n            return new Vector(this._x * scale, this._y * scale);\r\n        }\r\n\r\n        public scaleTo(length: number): Vector {\r\n            const l: number = this.length();\r\n            if (l !== 0) {\r\n                const factor: number = length / l;\r\n                return new Vector(this._x * factor, this._y * factor);\r\n            }\r\n            return new Vector(0, 0);\r\n        }\r\n\r\n    }\r\n}"]}